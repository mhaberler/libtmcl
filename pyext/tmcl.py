# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _tmcl
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


__TMCL_TMCLDEFS_H_ = _tmcl.__TMCL_TMCLDEFS_H_
TMCL_VERSION = _tmcl.TMCL_VERSION
TMCL_DGRAM_SIZE_CAN = _tmcl.TMCL_DGRAM_SIZE_CAN
TMCL_DGRAM_SIZE_IIC = _tmcl.TMCL_DGRAM_SIZE_IIC
TMCL_DGRAM_SIZE_RSXXX = _tmcl.TMCL_DGRAM_SIZE_RSXXX
TMCL_MAX_DGRAM_SIZE = _tmcl.TMCL_MAX_DGRAM_SIZE
TMCL_MAX_PAR_NO = _tmcl.TMCL_MAX_PAR_NO
TMCL_STATUS_SUCCESS = _tmcl.TMCL_STATUS_SUCCESS
TMCL_STATUS_LOADED_EEPROM = _tmcl.TMCL_STATUS_LOADED_EEPROM
TMCL_STATUS_WRONG_CHECKSUM = _tmcl.TMCL_STATUS_WRONG_CHECKSUM
TMCL_STATUS_INVALID_COMMAND = _tmcl.TMCL_STATUS_INVALID_COMMAND
TMCL_STATUS_WRONG_TYPE = _tmcl.TMCL_STATUS_WRONG_TYPE
TMCL_STATUS_INVALID_VALUE = _tmcl.TMCL_STATUS_INVALID_VALUE
TMCL_STATUS_EEPROM_LOCKED = _tmcl.TMCL_STATUS_EEPROM_LOCKED
TMCL_STATUS_COMMAND_NA = _tmcl.TMCL_STATUS_COMMAND_NA
TMCL_ROR = _tmcl.TMCL_ROR
TMCL_ROL = _tmcl.TMCL_ROL
TMCL_MST = _tmcl.TMCL_MST
TMCL_MVP = _tmcl.TMCL_MVP
TMCL_RFS = _tmcl.TMCL_RFS
TMCL_SAP = _tmcl.TMCL_SAP
TMCL_GAP = _tmcl.TMCL_GAP
TMCL_STAP = _tmcl.TMCL_STAP
TMCL_RSAP = _tmcl.TMCL_RSAP
TMCL_SGP = _tmcl.TMCL_SGP
TMCL_GGP = _tmcl.TMCL_GGP
TMCL_STGP = _tmcl.TMCL_STGP
TMCL_RSGP = _tmcl.TMCL_RSGP
TMCL_SIO = _tmcl.TMCL_SIO
TMCL_GIO = _tmcl.TMCL_GIO
TMCL_CALC = _tmcl.TMCL_CALC
TMCL_COMP = _tmcl.TMCL_COMP
TMCL_JC = _tmcl.TMCL_JC
TMCL_JA = _tmcl.TMCL_JA
TMCL_CSUB = _tmcl.TMCL_CSUB
TMCL_RSUB = _tmcl.TMCL_RSUB
TMCL_WAIT = _tmcl.TMCL_WAIT
TMCL_STOP = _tmcl.TMCL_STOP
TMCL_SAC = _tmcl.TMCL_SAC
TMCL_SCO = _tmcl.TMCL_SCO
TMCL_GCO = _tmcl.TMCL_GCO
TMCL_CCO = _tmcl.TMCL_CCO
TMCL_CALCX = _tmcl.TMCL_CALCX
TMCL_AAP = _tmcl.TMCL_AAP
TMCL_AGP = _tmcl.TMCL_AGP
TMCL_CLE = _tmcl.TMCL_CLE
TMCL_UF0 = _tmcl.TMCL_UF0
TMCL_UF1 = _tmcl.TMCL_UF1
TMCL_UF2 = _tmcl.TMCL_UF2
TMCL_UF3 = _tmcl.TMCL_UF3
TMCL_UF4 = _tmcl.TMCL_UF4
TMCL_UF5 = _tmcl.TMCL_UF5
TMCL_UF6 = _tmcl.TMCL_UF6
TMCL_UF7 = _tmcl.TMCL_UF7
TMCL_CTL_STOP = _tmcl.TMCL_CTL_STOP
TMCL_CTL_RUN = _tmcl.TMCL_CTL_RUN
TMCL_CTL_STEP = _tmcl.TMCL_CTL_STEP
TMCL_CTL_RST = _tmcl.TMCL_CTL_RST
TMCL_CTL_DLM_START = _tmcl.TMCL_CTL_DLM_START
TMCL_CTL_DLM_QUIT = _tmcl.TMCL_CTL_DLM_QUIT
TMCL_CTL_READMEM = _tmcl.TMCL_CTL_READMEM
TMCL_CTL_STATUS = _tmcl.TMCL_CTL_STATUS
TMCL_CTL_FW_VER = _tmcl.TMCL_CTL_FW_VER
TMCL_CTL_FACTORY = _tmcl.TMCL_CTL_FACTORY
TMCL_CTL_ASCII = _tmcl.TMCL_CTL_ASCII
TMCL_MVP_ABS = _tmcl.TMCL_MVP_ABS
TMCL_MVP_REL = _tmcl.TMCL_MVP_REL
TMCL_MVP_COORD = _tmcl.TMCL_MVP_COORD
TMCL_RFS_START = _tmcl.TMCL_RFS_START
TMCL_RFS_STOP = _tmcl.TMCL_RFS_STOP
TMCL_RFS_STATUS = _tmcl.TMCL_RFS_STATUS
TMCL_AP_TARGET_POS = _tmcl.TMCL_AP_TARGET_POS
TMCL_AP_CURR_POS = _tmcl.TMCL_AP_CURR_POS
TMCL_AP_TARGET_SPEED = _tmcl.TMCL_AP_TARGET_SPEED
TMCL_AP_MAX_POS_SPEED = _tmcl.TMCL_AP_MAX_POS_SPEED
TMCL_AP_MAX_ACCEL = _tmcl.TMCL_AP_MAX_ACCEL
TMCL_AP_ABS_CURRENT = _tmcl.TMCL_AP_ABS_CURRENT
TMCL_AP_STBY_CURRENT = _tmcl.TMCL_AP_STBY_CURRENT
TMCL_AP_DISABLE_LIMIT_R = _tmcl.TMCL_AP_DISABLE_LIMIT_R
TMCL_AP_DISABLE_LIMIT_L = _tmcl.TMCL_AP_DISABLE_LIMIT_L
TMCL_AP_SR_PRESC = _tmcl.TMCL_AP_SR_PRESC
TMCL_AP_MICROSTEPS = _tmcl.TMCL_AP_MICROSTEPS
TMCL_AP_MAX_CURR_REST = _tmcl.TMCL_AP_MAX_CURR_REST
TMCL_AP_MAX_CURR_LOW_ACCEL = _tmcl.TMCL_AP_MAX_CURR_LOW_ACCEL
TMCL_AP_MAX_CURR_HIGH_ACCEL = _tmcl.TMCL_AP_MAX_CURR_HIGH_ACCEL
TMCL_AP_RFS_MODE = _tmcl.TMCL_AP_RFS_MODE
TMCL_AP_RFS_SPEED = _tmcl.TMCL_AP_RFS_SPEED
TMCL_AP_RFS_SW_SPEED = _tmcl.TMCL_AP_RFS_SW_SPEED
TMCL_AP_CURR_SPEED = _tmcl.TMCL_AP_CURR_SPEED
TMCL_AP_POS_REACHED = _tmcl.TMCL_AP_POS_REACHED
TMCL_AP_LIMIT_R = _tmcl.TMCL_AP_LIMIT_R
TMCL_AP_LIMIT_L = _tmcl.TMCL_AP_LIMIT_L
TMCL_CAN = _tmcl.TMCL_CAN
TMCL_RSXXX = _tmcl.TMCL_RSXXX
TMCL_IIC = _tmcl.TMCL_IIC
TMCL_NONE = _tmcl.TMCL_NONE
TMCM300 = _tmcl.TMCM300
TMCM301 = _tmcl.TMCM301
TMCM302 = _tmcl.TMCM302
TMCM303 = _tmcl.TMCM303
TMCM310 = _tmcl.TMCM310
TMCM11x = _tmcl.TMCM11x
TMCM109 = _tmcl.TMCM109
TMCM110 = _tmcl.TMCM110
TMCM100 = _tmcl.TMCM100
TMCM610 = _tmcl.TMCM610
TMCM611 = _tmcl.TMCM611
TMCM612 = _tmcl.TMCM612
class TMCLDevice(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TMCLDevice, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TMCLDevice, name)
    __repr__ = _swig_repr
    __swig_setmethods__["address"] = _tmcl.TMCLDevice_address_set
    __swig_getmethods__["address"] = _tmcl.TMCLDevice_address_get
    if _newclass:address = _swig_property(_tmcl.TMCLDevice_address_get, _tmcl.TMCLDevice_address_set)
    __swig_setmethods__["bank"] = _tmcl.TMCLDevice_bank_set
    __swig_getmethods__["bank"] = _tmcl.TMCLDevice_bank_get
    if _newclass:bank = _swig_property(_tmcl.TMCLDevice_bank_get, _tmcl.TMCLDevice_bank_set)
    __swig_setmethods__["bus"] = _tmcl.TMCLDevice_bus_set
    __swig_getmethods__["bus"] = _tmcl.TMCLDevice_bus_get
    if _newclass:bus = _swig_property(_tmcl.TMCLDevice_bus_get, _tmcl.TMCLDevice_bus_set)
    __swig_setmethods__["model"] = _tmcl.TMCLDevice_model_set
    __swig_getmethods__["model"] = _tmcl.TMCLDevice_model_get
    if _newclass:model = _swig_property(_tmcl.TMCLDevice_model_get, _tmcl.TMCLDevice_model_set)
    __swig_setmethods__["num_refswitches"] = _tmcl.TMCLDevice_num_refswitches_set
    __swig_getmethods__["num_refswitches"] = _tmcl.TMCLDevice_num_refswitches_get
    if _newclass:num_refswitches = _swig_property(_tmcl.TMCLDevice_num_refswitches_get, _tmcl.TMCLDevice_num_refswitches_set)
    __swig_setmethods__["parameter"] = _tmcl.TMCLDevice_parameter_set
    __swig_getmethods__["parameter"] = _tmcl.TMCLDevice_parameter_get
    if _newclass:parameter = _swig_property(_tmcl.TMCLDevice_parameter_get, _tmcl.TMCLDevice_parameter_set)
    def __init__(self, *args): 
        this = _tmcl.new_TMCLDevice(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tmcl.delete_TMCLDevice
    __del__ = lambda self : None;
TMCLDevice_swigregister = _tmcl.TMCLDevice_swigregister
TMCLDevice_swigregister(TMCLDevice)
cvar = _tmcl.cvar
TMCLMicrosteps = cvar.TMCLMicrosteps

class TMCLReply(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TMCLReply, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TMCLReply, name)
    __repr__ = _swig_repr
    __swig_setmethods__["reply_address"] = _tmcl.TMCLReply_reply_address_set
    __swig_getmethods__["reply_address"] = _tmcl.TMCLReply_reply_address_get
    if _newclass:reply_address = _swig_property(_tmcl.TMCLReply_reply_address_get, _tmcl.TMCLReply_reply_address_set)
    __swig_setmethods__["module_address"] = _tmcl.TMCLReply_module_address_set
    __swig_getmethods__["module_address"] = _tmcl.TMCLReply_module_address_get
    if _newclass:module_address = _swig_property(_tmcl.TMCLReply_module_address_get, _tmcl.TMCLReply_module_address_set)
    __swig_setmethods__["status"] = _tmcl.TMCLReply_status_set
    __swig_getmethods__["status"] = _tmcl.TMCLReply_status_get
    if _newclass:status = _swig_property(_tmcl.TMCLReply_status_get, _tmcl.TMCLReply_status_set)
    __swig_setmethods__["command"] = _tmcl.TMCLReply_command_set
    __swig_getmethods__["command"] = _tmcl.TMCLReply_command_get
    if _newclass:command = _swig_property(_tmcl.TMCLReply_command_get, _tmcl.TMCLReply_command_set)
    __swig_setmethods__["value"] = _tmcl.TMCLReply_value_set
    __swig_getmethods__["value"] = _tmcl.TMCLReply_value_get
    if _newclass:value = _swig_property(_tmcl.TMCLReply_value_get, _tmcl.TMCLReply_value_set)
    __swig_setmethods__["checksum"] = _tmcl.TMCLReply_checksum_set
    __swig_getmethods__["checksum"] = _tmcl.TMCLReply_checksum_get
    if _newclass:checksum = _swig_property(_tmcl.TMCLReply_checksum_get, _tmcl.TMCLReply_checksum_set)
    def __init__(self, *args): 
        this = _tmcl.new_TMCLReply(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tmcl.delete_TMCLReply
    __del__ = lambda self : None;
TMCLReply_swigregister = _tmcl.TMCLReply_swigregister
TMCLReply_swigregister(TMCLReply)

class TMCLCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TMCLCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TMCLCommand, name)
    __repr__ = _swig_repr
    __swig_setmethods__["command"] = _tmcl.TMCLCommand_command_set
    __swig_getmethods__["command"] = _tmcl.TMCLCommand_command_get
    if _newclass:command = _swig_property(_tmcl.TMCLCommand_command_get, _tmcl.TMCLCommand_command_set)
    __swig_setmethods__["type"] = _tmcl.TMCLCommand_type_set
    __swig_getmethods__["type"] = _tmcl.TMCLCommand_type_get
    if _newclass:type = _swig_property(_tmcl.TMCLCommand_type_get, _tmcl.TMCLCommand_type_set)
    __swig_setmethods__["value"] = _tmcl.TMCLCommand_value_set
    __swig_getmethods__["value"] = _tmcl.TMCLCommand_value_get
    if _newclass:value = _swig_property(_tmcl.TMCLCommand_value_get, _tmcl.TMCLCommand_value_set)
    def __init__(self, *args): 
        this = _tmcl.new_TMCLCommand(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tmcl.delete_TMCLCommand
    __del__ = lambda self : None;
TMCLCommand_swigregister = _tmcl.TMCLCommand_swigregister
TMCLCommand_swigregister(TMCLCommand)

tmcl_init = _tmcl.tmcl_init
tmcl_deinit = _tmcl.tmcl_deinit
tmcl_checksum = _tmcl.tmcl_checksum
tmcl_datagram = _tmcl.tmcl_datagram
tmcl_valid_checksum = _tmcl.tmcl_valid_checksum
tmcl_dgram2reply = _tmcl.tmcl_dgram2reply
class TMCLMotor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TMCLMotor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TMCLMotor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["device"] = _tmcl.TMCLMotor_device_set
    __swig_getmethods__["device"] = _tmcl.TMCLMotor_device_get
    if _newclass:device = _swig_property(_tmcl.TMCLMotor_device_get, _tmcl.TMCLMotor_device_set)
    __swig_setmethods__["iface"] = _tmcl.TMCLMotor_iface_set
    __swig_getmethods__["iface"] = _tmcl.TMCLMotor_iface_get
    if _newclass:iface = _swig_property(_tmcl.TMCLMotor_iface_get, _tmcl.TMCLMotor_iface_set)
    def __init__(self, *args): 
        this = _tmcl.new_TMCLMotor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tmcl.delete_TMCLMotor
    __del__ = lambda self : None;
TMCLMotor_swigregister = _tmcl.TMCLMotor_swigregister
TMCLMotor_swigregister(TMCLMotor)

tmcl_init_motor = _tmcl.tmcl_init_motor
tmcl_deinit_motor = _tmcl.tmcl_deinit_motor
tmcl_send_command = _tmcl.tmcl_send_command
tmcl_update_axis_parameter = _tmcl.tmcl_update_axis_parameter
tmcl_set_axis_parameter = _tmcl.tmcl_set_axis_parameter
tmcl_get_axis_parameter = _tmcl.tmcl_get_axis_parameter
tmcl_store_axis_parameter = _tmcl.tmcl_store_axis_parameter
tmcl_move_to_pos_abs = _tmcl.tmcl_move_to_pos_abs
tmcl_move_to_pos_rel = _tmcl.tmcl_move_to_pos_rel
tmcl_move_to_coord = _tmcl.tmcl_move_to_coord
tmcl_stop = _tmcl.tmcl_stop
tmcl_refsearch_start = _tmcl.tmcl_refsearch_start
tmcl_refsearch_stop = _tmcl.tmcl_refsearch_stop
tmcl_refsearch_status = _tmcl.tmcl_refsearch_status
tmcl_get_position = _tmcl.tmcl_get_position
tmcl_ror = _tmcl.tmcl_ror
tmcl_rol = _tmcl.tmcl_rol
tmcl_set_max_current = _tmcl.tmcl_set_max_current
tmcl_get_max_current = _tmcl.tmcl_get_max_current
tmcl_set_max_standby_current = _tmcl.tmcl_set_max_standby_current
tmcl_get_max_standby_current = _tmcl.tmcl_get_max_standby_current
tmcl_set_microsteps = _tmcl.tmcl_set_microsteps
tmcl_get_microsteps = _tmcl.tmcl_get_microsteps
tmcl_activate_limit_switch = _tmcl.tmcl_activate_limit_switch
tmcl_deactivate_limit_switch = _tmcl.tmcl_deactivate_limit_switch
tmcl_get_limit_switch = _tmcl.tmcl_get_limit_switch
tmcl_set_no_ref_switch = _tmcl.tmcl_set_no_ref_switch
tmcl_get_current_speed = _tmcl.tmcl_get_current_speed
tmcl_set_refsearch_speed = _tmcl.tmcl_set_refsearch_speed
tmcl_get_refsearch_speed = _tmcl.tmcl_get_refsearch_speed
tmcl_set_pos_speed = _tmcl.tmcl_set_pos_speed
tmcl_get_pos_speed = _tmcl.tmcl_get_pos_speed
tmcl_get_limit_status = _tmcl.tmcl_get_limit_status
class TMCLInterface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TMCLInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TMCLInterface, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ifacename"] = _tmcl.TMCLInterface_ifacename_set
    __swig_getmethods__["ifacename"] = _tmcl.TMCLInterface_ifacename_get
    if _newclass:ifacename = _swig_property(_tmcl.TMCLInterface_ifacename_get, _tmcl.TMCLInterface_ifacename_set)
    __swig_setmethods__["bus"] = _tmcl.TMCLInterface_bus_set
    __swig_getmethods__["bus"] = _tmcl.TMCLInterface_bus_get
    if _newclass:bus = _swig_property(_tmcl.TMCLInterface_bus_get, _tmcl.TMCLInterface_bus_set)
    __swig_setmethods__["timeout_sec"] = _tmcl.TMCLInterface_timeout_sec_set
    __swig_getmethods__["timeout_sec"] = _tmcl.TMCLInterface_timeout_sec_get
    if _newclass:timeout_sec = _swig_property(_tmcl.TMCLInterface_timeout_sec_get, _tmcl.TMCLInterface_timeout_sec_set)
    __swig_setmethods__["timeout_msec"] = _tmcl.TMCLInterface_timeout_msec_set
    __swig_getmethods__["timeout_msec"] = _tmcl.TMCLInterface_timeout_msec_get
    if _newclass:timeout_msec = _swig_property(_tmcl.TMCLInterface_timeout_msec_get, _tmcl.TMCLInterface_timeout_msec_set)
    __swig_setmethods__["timewait_sec"] = _tmcl.TMCLInterface_timewait_sec_set
    __swig_getmethods__["timewait_sec"] = _tmcl.TMCLInterface_timewait_sec_get
    if _newclass:timewait_sec = _swig_property(_tmcl.TMCLInterface_timewait_sec_get, _tmcl.TMCLInterface_timewait_sec_set)
    __swig_setmethods__["timewait_msec"] = _tmcl.TMCLInterface_timewait_msec_set
    __swig_getmethods__["timewait_msec"] = _tmcl.TMCLInterface_timewait_msec_get
    if _newclass:timewait_msec = _swig_property(_tmcl.TMCLInterface_timewait_msec_get, _tmcl.TMCLInterface_timewait_msec_set)
    __swig_getmethods__["handle"] = _tmcl.TMCLInterface_handle_get
    if _newclass:handle = _swig_property(_tmcl.TMCLInterface_handle_get)
    def __init__(self, *args): 
        this = _tmcl.new_TMCLInterface(*args)
        try: self.this.append(this)
        except: self.this = this
    def open(*args): return _tmcl.TMCLInterface_open(*args)
    def close(*args): return _tmcl.TMCLInterface_close(*args)
    __swig_destroy__ = _tmcl.delete_TMCLInterface
    __del__ = lambda self : None;
TMCLInterface_swigregister = _tmcl.TMCLInterface_swigregister
TMCLInterface_swigregister(TMCLInterface)

class TMCLInterface_handle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TMCLInterface_handle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TMCLInterface_handle, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fd"] = _tmcl.TMCLInterface_handle_fd_set
    __swig_getmethods__["fd"] = _tmcl.TMCLInterface_handle_fd_get
    if _newclass:fd = _swig_property(_tmcl.TMCLInterface_handle_fd_get, _tmcl.TMCLInterface_handle_fd_set)
    def __init__(self, *args): 
        this = _tmcl.new_TMCLInterface_handle(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tmcl.delete_TMCLInterface_handle
    __del__ = lambda self : None;
TMCLInterface_handle_swigregister = _tmcl.TMCLInterface_handle_swigregister
TMCLInterface_handle_swigregister(TMCLInterface_handle)

tmcl_init_interface = _tmcl.tmcl_init_interface
tmcl_set_open_data = _tmcl.tmcl_set_open_data
tmcl_set_close_data = _tmcl.tmcl_set_close_data
tmcl_set_read_data = _tmcl.tmcl_set_read_data
tmcl_set_write_data = _tmcl.tmcl_set_write_data
tmcl_deinit_interface = _tmcl.tmcl_deinit_interface
tmcl_open_interface = _tmcl.tmcl_open_interface
tmcl_close_interface = _tmcl.tmcl_close_interface
tmcl_interface_set_timeout = _tmcl.tmcl_interface_set_timeout
tmcl_interface_set_timewait = _tmcl.tmcl_interface_set_timewait


